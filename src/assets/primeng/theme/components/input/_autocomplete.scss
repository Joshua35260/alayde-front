@use 'sass:math';

.disabled {
  pointer-events: none;
  opacity: 0.7;
  filter: (grayscale(100%));

  label {
    opacity: 0.1;
  }
}

.autocomplete-input-left-icon {
  display: flex;
  flex-direction: row;
  align-items: center;
  gap: 15px;

  @include sm {
    gap: 10px;
  }

  @include md {
    gap: 10px;
  }

  &>i {
    min-width: 20px;
    color: $primaryColor;
    font-size: 30px;

    @include sm {
      font-size: 24px;
      min-width: 14px
    }
  }

  p-chips {
    flex: 1;
  }
}

.p-autocomplete {
  width: 100%;
  padding: 0;

  @include md {
    padding: 4px;
  }

  @include sm {
    padding: 4px;
  }

  .p-autocomplete-loader {
    right: nth($inputPadding, 2);
  }

  &.p-autocomplete-dd {
    .p-autocomplete-loader {
      right: nth($inputPadding, 2) + $buttonIconOnlyWidth;
    }
  }

  .p-autocomplete-multiple-container {
    padding: math.div(nth($inputPadding, 1), 2) nth($inputPadding, 2);
    gap: $inlineSpacing;
    width: 100%;
    min-height: 44px;
    &:not(.p-disabled):hover {
      border-color: $inputHoverBorderColor;
    }

    &:not(.p-disabled).p-focus {
      @include focused-input();
    }

    .p-autocomplete-input-token {
      padding: 6px 0;

      input {
        font-family: $fontFamily;
        font-size: $fontSize;
        color: $textColor;
        padding: 0;
        margin: 0;

        @include md {
          font-size: 14px;
        }

        @include sm {
          font-size: 14px;
        }
      }
    }

    .p-autocomplete-token {
      padding: 1px 8px;
      font-size: 15px;
      display: flex;
      gap: 6px;

      @include md {
        font-size: 14px;
      }

      @include sm {
        font-size: 14px;
      }

      background: $shade900;
      color: white;
      border-radius: $borderRadius;

      .p-autocomplete-token-icon {
        margin-left: $inlineSpacing;
      }
    }
  }
}

p-autocomplete.ng-dirty.ng-invalid>.p-autocomplete>.p-inputtext {
  @include invalid-input();
}

.p-autocomplete-panel {
  background: $inputOverlayBg;
  color: $inputListTextColor;
  border: $inputOverlayBorder;
  border-radius: $borderRadius;
  box-shadow: $inputOverlayShadow;

  .p-autocomplete-items {
    padding: $inputListPadding;

    .p-autocomplete-item {
      margin: $inputListItemMargin;
      padding: $inputListItemPadding;
      border: $inputListItemBorder;
      color: $inputListItemTextColor;
      background: $inputListItemBg;
      transition: $listItemTransition;
      border-radius: $inputListItemBorderRadius;

      &:hover {
        color: $inputListItemTextHoverColor;
        background: $inputListItemHoverBg;
      }

      &.p-highlight {
        color: $highlightTextColor;
        background: $highlightBg;
      }
    }

    .p-autocomplete-empty-message {
      padding: $inputListItemPadding;
      color: $inputListItemTextColor;
      background: $inputListItemBg;
    }

    .p-autocomplete-item-group {
      margin: $submenuHeaderMargin;
      padding: $submenuHeaderPadding;
      color: $submenuHeaderTextColor;
      background: $submenuHeaderBg;
      font-weight: $submenuHeaderFontWeight;

      .p-autocomplete-item-group-sub-item {
        font-weight: normal;
        font-style: italic;
      }
    }
  }
}

p-autocomplete.p-autocomplete-clearable {
  .p-inputtext {
    padding-right: nth($inputPadding, 2) * 2 + $primeIconFontSize;
  }

  .p-autocomplete-clear-icon {
    color: $inputIconColor;
    right: nth($inputPadding, 2);
  }
}

p-autocomplete .p-autocomplete-dd {// ! autocomplete with select
  width: calc(100% + 42px);
    .p-button {
      background-color: transparent !important;
      border: none;
      left: -40px;
      color: var(--primary-text-color);
      box-shadow: none !important;
      z-index: 2;
    }
    .p-autocomplete-clear-icon {
        color: $inputIconColor;
        right: 75px;
        z-index: 3;
    }
}