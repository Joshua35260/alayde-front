on:
  push:
    branches:
      - main  # Déclenche le workflow sur les pushes à la branche principale

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest  # Utiliser un environnement Ubuntu pour l'exécution

    steps:
      - name: Checkout code
        uses: actions/checkout@v2  # Récupérer le code source du dépôt

      - name: Set up Node.js
        uses: actions/setup-node@v2  # Configurer Node.js dans l'environnement
        with:
          node-version: '22'  # Spécifier la version de Node.js à utiliser

      - name: Install frontend dependencies
        run: |
          echo "Installing frontend dependencies..."
          npm install  # Installer les dépendances définies dans package.json

      - name: Build the frontend project
        run: |
          echo "Building the frontend project..."
          npm run build --prod  # Compiler le projet en mode production

      - name: Set up SSH key
        run: |
          mkdir -p ~/.ssh  # Créer le répertoire .ssh s'il n'existe pas
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts  # Ajouter l'hôte à known_hosts

      - name: Deploy to VPS
        env:
          SERVER_IP: ${{ secrets.SERVER_IP }}  # Obtenir l'IP du VPS depuis les secrets GitHub
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}  # Obtenir le mot de passe depuis les secrets GitHub
        run: |
          echo "Transferring files to VPS..."

          # Supprimer le contenu existant dans le répertoire Caddy
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "rm -rf /usr/share/caddy/*" || { echo "Failed to connect to VPS"; exit 1; }

          # Transférer les nouveaux fichiers construits vers le VPS
          sshpass -p "$VPS_PASSWORD" scp -o StrictHostKeyChecking=no -r dist/tickly-front/browser/* root@$SERVER_IP:/usr/share/caddy/ || { echo "Failed to transfer files"; exit 1; }

          echo "Deployment completed!"

          # Redémarrer Caddy pour appliquer les changements
          echo "Restarting Caddy..."
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "systemctl restart caddy" || { echo "Failed to restart Caddy"; exit 1; }
          
          echo "Waiting for Caddy to restart..."
          sleep 10  # Attendre que Caddy ait le temps de redémarrer

      - name: Check Caddy Status
        env:
          VPS_PASSWORD: ${{ secrets.VPS_PASSWORD }}  # Obtenir le mot de passe depuis les secrets GitHub
        run: |
          echo "Checking Caddy status..."
          sshpass -p "$VPS_PASSWORD" ssh -o StrictHostKeyChecking=no root@$SERVER_IP "systemctl status caddy" || { echo "Failed to check Caddy status"; exit 1; }
